{"version":3,"sources":["sample.ts"],"names":[],"mappings":"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","file":"sample.js","sourcesContent":["/*\r\n * Copyright (c) Microsoft. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\nclass App {\r\n\r\n    constructor() { \r\n        // The initialize function is run each time the page is loaded.\r\n        Office.initialize = (reason) => {\r\n            $(document).ready(() => {\r\n                // Use this to check whether the new API is supported in the Word client.\r\n                if (Office.context.requirements.isSetSupported(\"WordApi\", 1.2)) {\r\n\r\n                    console.log('This code is using Word 2016 or greater.');\r\n                    \r\n                    // Setup the event handlers for UI.\r\n                    $('#loadSelectedImage').click(this.loadSelectedImageHandler.bind(this));\r\n                    $('#insertImageAtSelection').click(this.insertImageHandler.bind(this));\r\n\r\n                    // Scale the size of the canvas so that it scales  \r\n                    // when a user resizes the add-in.\r\n                    window.addEventListener('resize', this.resizeCanvas.bind(this), false);\r\n            \r\n                    // Setup the canvas event listener(s).\r\n                    this.initCanvas();\r\n                    \r\n                    // Automatically load an image if one is selected in Word when the task pane is launched.\r\n                    this.loadSelectedImageHandler();\r\n\r\n                } else {\r\n                    // Just letting you know that this code will not work with your version of Word.\r\n                    console.log('This add-in requires the WordAPI 1.2 requirement set or greater. Check your version of Word and the requirement set version.');\r\n                }\r\n            });\r\n        };\r\n    }\r\n\r\n    /*********************/\r\n    /* Globals           */\r\n    /*********************/\r\n\r\n    private _calloutEnabled: boolean = false; // we only want to add callout when an image is loaded.\r\n    private _calloutNumber: number; // set/reset when an image is loaded.\r\n    private _resizeRatio: number; // set when an image has been loaded in to the canvas.\r\n    private _windowWidth: number; // we are setting the canvas width to the window width.\r\n    private _image; // the image added to the canvas.\r\n \r\n    /*********************/\r\n    /* Canvas functions */\r\n    /*********************/\r\n\r\n     \r\n    /**\r\n    * Initialize the canvas with the click event. Click event inserts callouts into the canvas image. \r\n    */\r\n    initCanvas(): void {\r\n\r\n        this._windowWidth = window.innerWidth;\r\n\r\n        var canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n\r\n        var ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n\r\n        // Add callouts when the user clicks in the canvas.\r\n        ctx.canvas.addEventListener('click', (event) => {\r\n\r\n            // Let's make sure that we have an image loaded before\r\n            // we add callouts to the canvas.\r\n            if (this._calloutEnabled) {\r\n\r\n                // Increment callout number. We will use this later when we stub out\r\n                // descriptions for the callouts by using the Word JS API.\r\n                this._calloutNumber++;\r\n\r\n                // Get the bounds of the canvas element in relationship to the top-left of the viewport.\r\n                // We will get the coordinates in canvas, not the window.\r\n                var canvasBounds = canvas.getBoundingClientRect();\r\n\r\n                // Use the event coordinates, canvas boundaries, and the window width\r\n                // to get the coordinates where the callouts can be placed.\r\n                var height = this._windowWidth * this._resizeRatio;\r\n                var mouseX = (event.clientX - canvasBounds.left) * canvas.width / this._windowWidth;\r\n                var mouseY = (event.clientY - canvasBounds.top) * canvas.height / height;\r\n            \r\n                // Draw circle for the callout.\r\n                var radius = 12;\r\n                ctx.fillStyle = 'red';\r\n                ctx.beginPath();\r\n                ctx.arc(mouseX, mouseY, radius, 0, Math.PI * 2, true);\r\n                ctx.closePath();\r\n                ctx.fill();\r\n\r\n                // Insert the callout number in the circle.\r\n                var width = ctx.measureText(this._calloutNumber.toString());\r\n                ctx.font = 'bold 16px calabri ';\r\n                ctx.fillStyle = 'white';\r\n                ctx.textAlign = 'center';\r\n                ctx.fillText(this._calloutNumber.toString(), mouseX, mouseY + (radius / 3)); // this last argument is approximately correct for placement.\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Changes the canvas size according to the window width and the image aspect ratio. \r\n    */\r\n    resizeCanvas(): void {\r\n    \r\n        // Canvas must fit width of add-in.\r\n        this._windowWidth = window.innerWidth;\r\n\r\n        // Set the resize ratio only if it hasn't already been captured, \r\n        // and only if there is an image loaded in the add-in.\r\n        if (!this._resizeRatio && this._image)\r\n            this._resizeRatio = this._image.height / this._image.width;\r\n\r\n        // Resize the canvas only if there is an image loaded into it.\r\n        if (this._image) {\r\n            var height = this._windowWidth * this._resizeRatio;\r\n            var canvas = document.getElementById('canvas');\r\n            canvas.style.width = this._windowWidth + 'px';\r\n            canvas.style.height = height + 'px';\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Loads the image into the HTML canvas. loadSelectedImageHandler() checks whether you have an image.\r\n     * @param base64EncodedImage The image to load into the canvas.\r\n     */\r\n    loadImageIntoCanvas(base64EncodedImage): void {\r\n\r\n        // Callouts should only be added once the image is loaded into canvas.\r\n        this._calloutEnabled = false;\r\n        \r\n        // Create an image and load it onto the canvas, set the canvas to the image\r\n        // dimensions, and draw it on the canvas.\r\n        this._image = new Image();\r\n        this._image.onload = () => {\r\n\r\n            var canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n            var ctx = canvas.getContext(\"2d\");\r\n\r\n            canvas.height = this._image.height;\r\n            canvas.width = this._image.width;\r\n            ctx.drawImage(this._image, 0, 0);\r\n         \r\n            // Reset the this._calloutNumber when I load a new image.\r\n            this._calloutNumber = 0;\r\n\r\n            // Enable adding callouts to the canvas.\r\n            this._calloutEnabled = true;\r\n            \r\n            // Make the canvas scale to the window.\r\n            this.resizeCanvas();\r\n        };\r\n\r\n        // ASSUMPTION: we are assuming only png files. You will need to determine file type.\r\n        // Load the image we got from Word.\r\n        this._image.src = \"data:image/png;base64,\" + base64EncodedImage.value;\r\n    }\r\n\r\n    /*********************/\r\n    /* Word JS functions */\r\n    /*********************/\r\n\r\n    /**\r\n    * Load the the selected image from Word into the add-in. This assumes that a single image was selected. \r\n    */\r\n    loadSelectedImageHandler(): void {\r\n        Word.run((context) => {\r\n\r\n            // Create a proxy object for the range that is assumed to contain an image.\r\n            var imageRange = context.document.getSelection();\r\n\r\n            // Load the selected range.\r\n            context.load(imageRange, 'inlinePictures');\r\n\r\n            // Synchronize the document state by executing the queued commands, \r\n            // and return a promise to indicate task completion.\r\n            return context.sync()\r\n                .then(() => {\r\n                    // If there is more than one inline picture, then we need to tell the user to choose a single picture.\r\n                    if (imageRange.inlinePictures.items.length === 1) {\r\n\r\n                        // Queue a command to get the image source. \r\n                        var imageString = imageRange.inlinePictures.items[0].getBase64ImageSrc();\r\n\r\n                        // Synchronize the document state by executing the queued commands, \r\n                        // and return a promise to indicate task completion.\r\n                        return context.sync().then(() => {\r\n                            this.loadImageIntoCanvas(imageString);\r\n                        });\r\n\r\n                    }\r\n                    // \r\n                    else {\r\n                        throw \"You need to select a single image.\"\r\n                    }\r\n\r\n                });\r\n        })\r\n            .catch((error) => {\r\n                console.log('Error: ' + JSON.stringify(error));\r\n                if (error instanceof OfficeExtension.Error) {\r\n                    console.log('Debug info: ' + JSON.stringify(error.debugInfo));\r\n                }\r\n            });\r\n    }\r\n  \r\n    /**\r\n    * Insert the contents of the canvas into the Word document. \r\n    */\r\n    insertImageHandler(): void {\r\n\r\n        // Only insert the contents of the canvas if we an image in it.\r\n        if (this._image) {\r\n\r\n            var canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n\r\n            // Get the data URL for the image in the canvas. \r\n            var pngDataUrl = canvas.toDataURL(); // data uri scheme\r\n\r\n            // Extract the encoding format information. Word only accepts the base64 content. \r\n            // ASSUMPTION: that this is a png file.\r\n            var base64ImgString = pngDataUrl.replace('data:image/png;base64,', '');\r\n\r\n            Word.run((context) => {\r\n\r\n                // Create a proxy object for the range at the current selection.\r\n                var imageRange = context.document.getSelection();\r\n\r\n                // Load the selected range.\r\n                context.load(imageRange, 'text');\r\n\r\n                // Synchronize the document state by executing the queued commands, \r\n                // and return a promise to indicate task completion.\r\n                return context.sync()\r\n                    .then(() => {\r\n\r\n                        // Queue a command to insert the image into the document.\r\n                        var insertedImage = imageRange.insertInlinePictureFromBase64(base64ImgString, Word.InsertLocation.replace);\r\n\r\n                        // Queue a command to navigate the UI to the insert picture.\r\n                        insertedImage.select();\r\n\r\n                        // Queue an indefinite number of commands to insert paragraphs \r\n                        // based on the number of callouts added to the image. \r\n                        if (this._calloutNumber > 0) {\r\n                            var lastParagraph = insertedImage.insertParagraph('Here are your callout descriptions:', Word.InsertLocation.after) as Word.Paragraph;\r\n\r\n                            for (var i = 0; i < this._calloutNumber; i++) {\r\n                                lastParagraph = lastParagraph.insertParagraph((i + 1) + ') [enter callout description].', Word.InsertLocation.after);\r\n                            }\r\n                        }\r\n                    })\r\n                    // Synchronize the document state by executing the queued commands.\r\n                    .then(context.sync);\r\n            })\r\n                .catch((error) => {\r\n                    console.log('Error: ' + JSON.stringify(error));\r\n                    if (error instanceof OfficeExtension.Error) {\r\n                        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\r\n                    }\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\nvar app = new App();"],"sourceRoot":"/source/"}